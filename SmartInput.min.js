class SmartInput { constructor(e, t) { this.options = this.setOptions(t), this.input = this.setInput(e), this.input && (this.previousValue = this.input.value, this.input.value = this.val(), this.format(!0)) } setOptions(e) { var t, i, n, r, l, s, a, p, o, u, h, c, m, d, f, g, $, y, _, v, A, b, E, U, L, S, x, B, C, T, M, N; let O; (e = "object" == typeof e ? e : {}).type = ["NUMERAL", "DATE", "TIME", "CUSTOM"].includes(O = String(t = e.type).toUpperCase()) ? O : "CUSTOM"; let j, Z, R, k, D, I, V, H, F, W, Y = { NUMERAL: { type: e.type, onBlur: e.onBlur || !1, emptyToZero: (i = e.emptyToZero) ? "string" == typeof i ? /^(true|false)$/i.test(i) : "boolean" != typeof i || i : "boolean" != typeof i, decimalPlaces: !!(K(n = e.decimalPlaces) && Math.min(parseInt(n), 100) >= 0) && Math.min(parseInt(n), 100), numeralStyle: ["THOUSAND", "LAKH", "WAN"].includes(j = String(r = e.numeralStyle).toUpperCase()) ? j : "THOUSAND", trailingZero: (l = e.trailingZero) ? "string" == typeof l ? /^(true|false)$/i.test(l) : "boolean" != typeof l || l : "boolean" != typeof l, delimiters: (B = z(!!(s = e.delimiters) && ("string" == typeof s ? s.split("") : !!Array.isArray(s) && s)), C = [",", "."], "" === (B = 0 == (B = (B || C).slice(0, 2).filter(e => "string" == typeof e).map(e => e.replace(/[0-9-]/g, "").charAt(0))).length ? C : 1 == B.length ? [B[0], B[0]] : B)[1] ? [B[0], C[1]] : B), max: !!K(a = e.max) && w(a), min: !!K(p = e.min) && w(p) }, CUSTOM: { type: e.type, onBlur: e.onBlur || !1, blocks: !!(Z = !!(o = e.blocks) && ((T = o, "number" == typeof T) ? [o] : !!Array.isArray(o) && o.length > 0 && o)) && (N = (M = Z, !!M && M.map(e => e ? "number" == typeof e ? parseInt(e) : "string" == typeof e ? isNaN(parseInt(e)) ? 0 : parseInt(e) : 0 : 0)), N.map(e => Math.abs(e))), onlyNumbers: !!(u = e.onlyNumbers) && ("string" == typeof u ? /^(true|false)$/i.test(u) : "boolean" == typeof u && u), leadingZero: (h = e.leadingZero) ? "string" == typeof h ? /^(true|false)$/i.test(h) : "boolean" != typeof h || h : "boolean" != typeof h, delimiters: z(!!(c = e.delimiters) && ("string" == typeof c ? c.split("") : !!Array.isArray(c) && c)) || [""], contained: !!(m = e.contained) && ("string" == typeof m ? /^(true|false)$/i.test(m) : "boolean" == typeof m && m), max: K(d = e.max) ? [w(d)] : !!Array.isArray(d) && q(d).length > 0 && q(d), min: K(f = e.min) ? [w(f)] : !!Array.isArray(f) && q(f).length > 0 && q(f) }, TIME: { contained: !0, onlyNumbers: !0, leadingZero: !0, type: e.type, onBlur: e.onBlur || !1, pattern: function (t) { let i = ["H", "M", "S"], n = "string" == typeof t ? t.split("") : Array.isArray(t) ? t : i, r = []; for (let l of n) r.includes(l) || r.includes(l.toUpperCase()) || r.push(l); return e.pattern = r.filter(e => i.includes(String(e).toUpperCase())), r.filter(e => i.includes(String(e).toUpperCase())) }(e.pattern), delimiters: z((g = e.delimiters) ? "string" == typeof g ? g.split("") : Array.isArray(g) ? g : [":"] : [":"]) || [":"], blocks: ($ = e.pattern).map(e => 2), max: (y = e.pattern, _ = e.max, R = { H: [0, 23] }, k = y.map(e => R[e.toUpperCase()] || [0, 59]), _ = (_ = K(_) ? [parseInt(_)] : Array.isArray(_) ? _ : []).slice(0, k.length), k.map((e, t) => _[t] ? Math.min(Math.max(e[0], _[t]), e[1]) : e[1])), min: (v = e.pattern, A = e.min, D = { H: [0, 23] }, I = v.map(e => D[e.toUpperCase()] || [0, 59]), A = (A = K(A) ? [parseInt(A)] : Array.isArray(A) ? A : []).slice(0, I.length), I.map((e, t) => A[t] ? Math.min(Math.max(e[0], A[t]), e[1]) : e[0])) }, DATE: { contained: !0, onlyNumbers: !0, leadingZero: !0, type: e.type, onBlur: e.onBlur || !1, pattern: function (t) { let i = ["M", "D", "Y"], n = "string" == typeof t ? t.split("") : Array.isArray(t) ? t : i, r = []; for (let l of n) r.includes(l) || r.includes(l.toUpperCase()) || r.push(l); return e.pattern = r.filter(e => i.includes(String(e).toUpperCase())), r.filter(e => i.includes(String(e).toUpperCase())) }(e.pattern), delimiters: z((b = e.delimiters) ? "string" == typeof b ? b.split("") : Array.isArray(b) ? b : ["/"] : ["/"]) || ["/"], blocks: (E = e.pattern).map(e => "Y" === e ? 4 : 2), max: (U = e.pattern, L = e.max, V = { Y: [1, 9999], M: [1, 12] }, H = U.map(e => V[e.toUpperCase()] || [1, 31]), L = (L = K(L) ? [parseInt(L)] : Array.isArray(L) ? L : []).slice(0, H.length), H.map((e, t) => L[t] ? Math.min(Math.max(e[0], parseInt(L[t])), e[1]) : e[1])), min: (S = e.pattern, x = e.min, F = { Y: [1, 9999], M: [1, 12] }, W = S.map(e => F[e.toUpperCase()] || [1, 31]), x = (x = K(x) ? [parseInt(x)] : Array.isArray(x) ? x : []).slice(0, W.length), W.map((e, t) => x[t] ? Math.min(Math.max(e[0], parseInt(x[t])), e[1]) : e[0])) } }, G = Y[e.type]; for (let P in console.log(G), G) !1 === G[P] && delete G[P]; return G; function w(e) { return e ? e.toLocaleString("en-US", { useGrouping: !1 }) : e } function K(e) { let t = w(e); return t = !!t && t.replace(/[\.]/g, ""), /^-?\d+$/.test(t) && !isNaN(Number(e)) } function q(e) { return e.map(e => { let t = "number" == typeof e ? Number.isInteger(e) ? e : Math.floor(e) : !!("string" == typeof e && K(e)) && e; return !!K(t) && w(t) }) } function z(e) { return !!e && e.map(e => e ? "string" == typeof e ? e : e.toString : "") } } setInput(e) { var t; if (e = (t = e) ? "string" == typeof t ? document.querySelector(t) : e instanceof HTMLInputElement ? t : null : null) return e.addEventListener("input", this.handleInputEventListener), e.addEventListener("focus", this.handleFocusEventListener), e.addEventListener("blur", this.handleBlurEventListener), e } handleInputEventListener = e => { if (this.options.onBlur) this.input.value = this.val(), this.adjustValue(); else { let t = this.input.value, i = this.input.selectionStart; this.input.value = this.val(), this.adjustValue(), this.format(), this.input.value == this.previousValue && "deleteContentBackward" == e.inputType && i--, this.previousValue = this.input.value; let n = i + (this.input.value.length - t.length); if (this.input.setSelectionRange) this.input.setSelectionRange(n, n); else if (this.input.createTextRange) { let r = this.input.createTextRange(); r.collapse(!0), r.moveEnd("character", n), r.moveStart("character", n), r.select() } } }; handleBlurEventListener = () => { this.options.onBlur ? (this.format(!0), this.previousValue = this.input.value) : (this.input.value = this.val(), this.adjustValue(), this.format(!0), this.previousValue = this.input.value) }; handleFocusEventListener = () => { this.options.onBlur && (this.input.value = this.val()) }; format(e) { var t; let i = this.options, n = this.input.value, r = i.onlyNumbers, l = i.decimalPlaces, s = i.emptyToZero, a = i.trailingZero, p = i.leadingZero, o = i.delimiters, u = i.blocks, h = i.max, c = i.min, m = i.pattern, d = "NUMERAL" === i.type, f = "DATE" === i.type; n = d && "-" == n && e ? "" : n, n = String(r && !u && _(c) && n.length > 0 && e && Number(n) <= Number(c) ? c : n), n = String(r && !u && _(h) && n.length > 0 && e && Number(n) >= Number(h) ? h : n); let g = d ? function t(n) { var r, p; if (0 === n.length) { if (!s || !e) return [""]; n = c && Number(c) > 0 ? c : "0" } let u = !e && n.endsWith(`${o[1]}`) && o[1] ? o[1] : "", m = { LAKH: /\B(?=(?:(\d\d)+(\d)(?!\d))+(?!\d))/g, THOUSAND: /\B(?=(\d{3})+(?!\d))/g, WAN: /\B(?=(\d{4})+(?!\d))/g }[i.numeralStyle.toUpperCase()], d = l && e ? Number(n.replace(o[1], ".")).toFixed(l) : Number(n.replace(o[1], ".")); n = e ? n.replace(/^(-?)0+(?=[\d])/g, "$1").replace(`-${o[1]}`, `-0${o[1]}`).replace(RegExp(`^\\${o[1]}`), `0${o[1]}`) : n.replace(/^(-?)0+(?=[\d])/g, "$1"), n = d <= Number(c) && e ? c.replace(".", o[1]) : n, n = d >= Number(h) && e ? h.replace(".", o[1]) : n, 0 == d && n.includes("-") && e && (n = n.replace("-", "")); let f = n.split(o[1]); f[0] = f[0].replace(m, o[0]), f[1] = f[1] ? o[1] + (e && _(l) && a ? (r = f[1].slice(0, String(l)), p = l, r.length < p ? r + "0".repeat(p - r.length) : r) : !e && _(l) ? f[1].slice(0, String(l)) : f[1]) : e && _(l) && a ? `${o[1]}${"0".repeat(l)}` : ""; let g = e ? f.join("").replace(/^-0$/, "0") : f.join(""); return g.startsWith(`${o[1]}`) && e ? ["0" + g] : [g + u] }(n) : i.blocks ? function t(i) { let n = [], l = 0; for (; i.length > 0;) { let s = u[l % u.length], a = i.slice(0, s), o = !!Array.isArray(c) && c[l % c.length], d = !!Array.isArray(h) && h[l % h.length]; a = String(_(o) && e && r && Number(a) <= Number(o) ? o : a), a = String(_(d) && e && r && Number(a) >= Number(d) ? d : a), (a = r && e && p ? v(a, s) : a).length > 0 && (n.push(a), i = i.slice(s)), l++ } if (f && e) { let g = m.indexOf("m") > -1 ? m.indexOf("m") : m.indexOf("M"), $ = m.indexOf("d") > -1 ? m.indexOf("d") : m.indexOf("D"), y = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][n[g] - 1] || 31; n[$] && n[g] && (n[$] = v(Math.min(n[$], y), 2)) } return n }(n) : [n], $, y; function _(e) { var t; let i = (t = e) ? t.toLocaleString("en-US", { useGrouping: !1 }) : t; return i = !!i && i.replace(/[\.]/g, ""), /^-?\d+$/.test(i) && !isNaN(Number(e)) } function v(e, t) { return String(e).padStart(t, "0") } this.input.value = "" + (t = g, $ = "", y = 0, t.forEach((e, i) => { let n = i === t.length - 1, r = o[y]; y = (y + 1) % o.length, $ += n ? e : e + r }), $) } val(e) { var t; let i = this.options, n = this.input.value, r = this.options.blocks, l = this.options.contained, s = ("NUMERAL" === i.type ? [i.delimiters[0]] : i.delimiters).map(e => e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")); return e ? n : l && r ? n.replace(RegExp(s.join("|"), "gi"), "").slice(0, (t = i.blocks, t.reduce((e, t) => e + t, 0))) : n.replace(RegExp(s.join("|"), "gi"), "") } adjustValue() { let e = "", t = this.options, i = this.input.value, n = t.delimiters, r = t.onlyNumbers, l = "NUMERAL" === t.type, s = this.input.selectionStart, a = l ? [n[0]].map(e => e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")) : n.map(e => e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")); if (i = i.replace(RegExp(a.join("|"), "gi"), ""), l) { var p, o, u, h; e += i.split("-").length > 1 ? "-" : ""; let c, m = (p = i, o = n[1], c = RegExp(u ? `\\${o}` : `(\\${o}(?=[^${o}]*\\${o}))`, "g"), (u ? p.replace(c, function (e, t, i) { return i.indexOf(e) === t ? e : "" }) : p.replace(c, "")).replace(RegExp(`[^\\d${o}]`, "g"), "")).split(n[1]); m[0] = m[0].length > 0 ? String((h = m[0], h.toLocaleString("fullwide", { useGrouping: !1 }))) : "", m[1] = m.length > 1 ? n[1] + m[1] : "", i = m.join("") } i = r ? i.replace(/[\D]/g, "") : i, this.input.value = e + i, this.input.setSelectionRange(s, s) } destroy() { this.input.value = this.val(), this.input.removeEventListener("input", this.handleInputEventListener), this.input.removeEventListener("focus", this.handleFocusEventListener), this.input.removeEventListener("blur", this.handleBlurEventListener) } groups() { let e = this.options.delimiters, t = [this.val(!0)]; return e.forEach(e => { t = t.flatMap(t => t.split(e)) }), t = t.filter(e => "" !== e) } }